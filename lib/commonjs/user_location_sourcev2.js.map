{"version":3,"sources":["user_location_sourcev2.tsx"],"names":["accuracyFilterFor","isIOS","markerFilterFor","getDefaultOptions","iconRotation","aboveLayer","Constants","LAYER_POLYGONS_ABOVE_PATHS","markerStyle","iconImage","iconSize","iconAllowOverlap","iconRotate","accuracyStyle","fillColor","fillOpacity","getCollection","location","showHeading","type","features","geometry","coordinates","lng","lat","accuracy","properties","usecase","id","icon","UserLocationSource","Proximiio","state","setState","ProximiioMapbox","subscribe","ProximiioMapboxEvents","STYLE_CHANGED","onChange","FEATURES_CHANGED","LOCATION_UPDATED","onLocationChanged","CompassHeading","start","heading","unsubscribe","stop","_options","props","options","collection","SOURCE_USER_LOCATION","Date","getTime","LAYER_USER_ACCURACY","style","layers","length","LAYER_USER_MARKER","React","Component"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { StyleProp} from 'react-native';\nimport MapboxGL, {\n  Expression,\n  FillLayerStyle,\n  SymbolLayerStyle,\n} from '@react-native-mapbox-gl/maps';\nimport Proximiio, { ProximiioLocation } from 'react-native-proximiio';\nimport ProximiioMapbox, { ProximiioMapboxEvents } from './instance';\n\nimport Constants from './constants';\nimport { isIOS, createGeoJSONCircle } from './helpers';\nimport { ProximiioFeatureType, FeatureCollection } from './types';\nimport CompassHeading from 'react-native-compass-heading';\n\nexport type UserLocationSourceOptions = {\n  aboveLayer?: string\n  markerStyle?: StyleProp<SymbolLayerStyle>\n  accuracyStyle?: StyleProp<FillLayerStyle>\n};\n\ninterface Props {\n  showHeading?: boolean;\n  options?: UserLocationSourceOptions;\n}\n\nconst accuracyFilterFor = () => (isIOS ?\n    [\n      'all',\n      ['==', 'usecase', 'user-location-accuracy'],\n    ] :\n    [\n      'all',\n      ['==', ['get', 'usecase'], 'user-location-accuracy'],\n    ]\n) as Expression;\n\nconst markerFilterFor = () => (isIOS ?\n    [\n      'all',\n      ['==', 'usecase', 'user-location'],\n    ] :\n    [\n      'all',\n      ['==', ['get', 'usecase'], 'user-location'],\n    ]\n) as Expression;\n\nconst getDefaultOptions = (iconRotation: number) => ({\n  aboveLayer: Constants.LAYER_POLYGONS_ABOVE_PATHS,\n  markerStyle: {\n    iconImage: ['get', 'icon'] as Expression,\n    iconSize: 0.5,\n    iconAllowOverlap: true,\n    iconRotate: iconRotation,\n  },\n  accuracyStyle: {\n    fillColor: '#0080c0',\n    fillOpacity: 0.3,\n  },\n});\n\nconst getCollection = (location: ProximiioLocation, showHeading: boolean): FeatureCollection => ({\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          createGeoJSONCircle(\n            [location.lng, location.lat],\n            (location.accuracy || 50) / 1000,\n            50\n          ),\n        ],\n      },\n      properties: {\n        usecase: 'user-location-accuracy',\n      },\n    } as ProximiioFeatureType,\n    {\n      id: 'user-location-marker',\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [location.lng, location.lat],\n      },\n      properties: {\n        usecase: 'user-location',\n        icon: showHeading ? 'bluedotWithCone' : 'bluedot',\n      },\n    } as ProximiioFeatureType\n  ],\n})\n\ninterface State {\n  location?: ProximiioLocation;\n  heading?: number;\n}\n\nexport class UserLocationSource extends React.Component<Props, State> {\n  state = {\n    location: Proximiio.location\n  } as State\n\n  componentDidMount() {\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.STYLE_CHANGED, this.onChange);\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange);\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.LOCATION_UPDATED, this.onLocationChanged);\n    CompassHeading.start(3, ({heading, accuracy}) => {\n      this.setState({heading: heading});\n    });\n  }\n\n  componentWillUnmount() {\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.STYLE_CHANGED, this.onChange);\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange);\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.LOCATION_UPDATED, this.onLocationChanged);\n    CompassHeading.stop();\n  }\n\n  private onChange = () => {\n    if (!this.state.location) {\n      return\n    }\n  }\n\n  private onLocationChanged = (location: ProximiioLocation) => {\n    this.setState({location: location});\n  }\n\n  public render() {\n    const _options = {\n      ...getDefaultOptions(this.state.heading || 0),\n      ...this.props.options\n    };\n\n    if (!this.state.location) {\n      return null\n    }\n\n    const collection = getCollection(this.state.location, !!this.props.showHeading);\n\n    return (\n      <MapboxGL.ShapeSource\n        id={Constants.SOURCE_USER_LOCATION}\n        key={Constants.SOURCE_USER_LOCATION + new Date().getTime()}\n        shape={collection}\n        cluster={false}\n        maxZoomLevel={24}\n      >\n        <MapboxGL.FillLayer\n          id={Constants.LAYER_USER_ACCURACY}\n          key={Constants.LAYER_USER_ACCURACY + new Date().getTime()}\n          filter={accuracyFilterFor()}\n          style={_options.accuracyStyle}\n          layerIndex={ProximiioMapbox.style.layers.length * 2}\n          aboveLayerID={Constants.LAYER_POLYGONS_ABOVE_PATHS}\n        />\n        <MapboxGL.SymbolLayer\n          id={Constants.LAYER_USER_MARKER}\n          key={Constants.LAYER_USER_MARKER}\n          filter={markerFilterFor()}\n          style={_options.markerStyle}\n          layerIndex={ProximiioMapbox.style.layers.length * 2}\n          aboveLayerID={Constants.LAYER_USER_ACCURACY}\n        />\n      </MapboxGL.ShapeSource>\n    )\n  }\n}\n"]}