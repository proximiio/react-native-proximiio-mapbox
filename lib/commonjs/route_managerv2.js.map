{"version":3,"sources":["route_managerv2.ts"],"names":["ProximiioMapboxNative","NativeModules","WALKING_SPEED","ProximiioRouteEvents","ProximiioRouteManager","routeConfiguration","routeCalculate","JSON","stringify","routeStarted","routePreviewed","routeFind","routeFindAndPreview","routeFindAndStart","route","notify","ROUTE_PREVIEWED","routeStart","routeCancel","ROUTE_CALCULATED","event","eventType","undefined","ROUTE_ENDED","ROUTE_UPDATED","Eventable"],"mappings":"+3BAAA,yCACA,sC,stBAIQA,CAAAA,qB,CAA0BC,0B,CAA1BD,qB,CACR,GAAME,CAAAA,aAAa,CAAG,KAAtB,C,GAEYC,CAAAA,oB,6DAAAA,oB,EAAAA,oB,kDAAAA,oB,4CAAAA,oB,gDAAAA,oB,2CAAAA,oB,gCAAAA,oB,SAOCC,CAAAA,qB,8HAMX,gCAAc,oEACZ,wBADY,iLAHY,KAGZ,yFAFU,KAEV,eAEb,C,2FAQSC,kB,CAAiD,CACzD,MAAOL,CAAAA,qBAAqB,CAACM,cAAtB,CAAqCC,IAAI,CAACC,SAAL,CAAeH,kBAAf,CAArC,CAAP,CACD,C,kCAQWA,kB,CAAiD,CAC3D,KAAKI,YAAL,CAAoB,KAApB,CACA,KAAKC,cAAL,CAAsB,KAAtB,CACAV,qBAAqB,CAACW,SAAtB,CAAgCJ,IAAI,CAACC,SAAL,CAAeH,kBAAf,CAAhC,EACD,C,sDAKqBA,kB,CAAiD,CACrE,KAAKI,YAAL,CAAoB,KAApB,CACA,KAAKC,cAAL,CAAsB,IAAtB,CACAV,qBAAqB,CAACY,mBAAtB,CAA0CL,IAAI,CAACC,SAAL,CAAeH,kBAAf,CAA1C,EACD,C,kDAKmBA,kB,CAAiD,CACnE,KAAKI,YAAL,CAAoB,IAApB,CACA,KAAKC,cAAL,CAAsB,IAAtB,CACAV,qBAAqB,CAACa,iBAAtB,CAAwCN,IAAI,CAACC,SAAL,CAAeH,kBAAf,CAAxC,EACD,C,yCAKgB,CACf,GAAI,KAAKS,KAAL,EAAc,IAAd,EAAsB,KAAKJ,cAA3B,EAA6C,CAAC,KAAKD,YAAvD,CAAqE,CACnE,MAAO,MAAP,CACD,CAFD,IAEO,CACL,KAAKC,cAAL,CAAsB,IAAtB,CACA,KAAKK,MAAL,CAAYZ,oBAAoB,CAACa,eAAjC,EACA,MAAO,KAAP,CACD,CACF,C,qCAKc,CACb,GAAI,KAAKF,KAAL,EAAc,IAAd,EAAsB,CAAC,KAAKL,YAAhC,CAA8C,CAC5C,KAAKA,YAAL,CAAoB,IAApB,CACAT,qBAAqB,CAACiB,UAAtB,GACA,MAAO,KAAP,CACD,CAJD,IAIO,CACL,MAAO,MAAP,CACD,CACF,C,uCAKe,CACdjB,qBAAqB,CAACkB,WAAtB,GACA,KAAKT,YAAL,CAAoB,KAApB,CACD,C,kDASmBK,K,CAA8B,CAChD,KAAKA,KAAL,CAAaA,KAAb,CACA,KAAKC,MAAL,CAAYZ,oBAAoB,CAACgB,gBAAjC,CAAmDL,KAAnD,EACD,C,0CAEeM,K,CAA4B,CAE1C,GACEA,KAAK,CAACC,SAAN,EAAmB,UAAnB,EACGD,KAAK,CAACC,SAAN,EAAmB,UADtB,EAEGD,KAAK,CAACC,SAAN,EAAmB,iBAFtB,EAGGD,KAAK,CAACC,SAAN,EAAmB,0BAJxB,CAKE,CACA,KAAKZ,YAAL,CAAoB,KAApB,CACA,KAAKC,cAAL,CAAsB,KAAtB,CACA,KAAKI,KAAL,CAAaQ,SAAb,CACA,KAAKP,MAAL,CAAYZ,oBAAoB,CAACoB,WAAjC,CAA8CH,KAA9C,EACD,CAVD,IAUO,CACL,KAAKN,KAAL,CAAaM,KAAK,CAACN,KAAnB,CACA,KAAKC,MAAL,CAAYZ,oBAAoB,CAACqB,aAAjC,CAAgDJ,KAAhD,EACD,CACF,C,mCAhHwCK,oB","sourcesContent":["import { NativeModules, Platform } from \"react-native\";\nimport { Eventable } from \"./eventable\";\nimport {ProximiioMapboxRoute, ProximiioRouteConfiguration, ProximiioRouteEvent} from './types';\nimport {ProximiioMapboxEvents} from \"./instance\";\n\nconst { ProximiioMapboxNative } = NativeModules;\nconst WALKING_SPEED = 0.833;\n\nexport enum ProximiioRouteEvents {\n  ROUTE_CALCULATED = 'proximiio:route:calculated',\n  ROUTE_UPDATED = 'proximiio:route:updated',\n  ROUTE_PREVIEWED = 'proximiio:route:previewed',\n  ROUTE_ENDED = 'proximiio:route:ended',\n}\n\nexport class ProximiioRouteManager extends Eventable {\n\n  route?: ProximiioMapboxRoute\n  routePreviewed: boolean = false\n  routeStarted: boolean = false\n\n  constructor() {\n    super();\n  }\n\n  /* ---------------------------------------------------------------------------------------------------------------- */\n  /* Route Calculation */\n\n  /**\n   * @return {Promise<ProximiioRoute>}\n   */\n  calculate(routeConfiguration: ProximiioRouteConfiguration) {\n    return ProximiioMapboxNative.routeCalculate(JSON.stringify(routeConfiguration));\n  }\n\n  /* ---------------------------------------------------------------------------------------------------------------- */\n  /* Route Navigation */\n\n  /**\n   * Find route to navigate on, but do not start navigation or preview it on map.\n   */\n  public find(routeConfiguration: ProximiioRouteConfiguration) {\n    this.routeStarted = false\n    this.routePreviewed = false\n    ProximiioMapboxNative.routeFind(JSON.stringify(routeConfiguration));\n  }\n\n  /**\n   * Find route to navigate on, but do not start navigation, only preview it on map.\n   */\n  public findAndPreview(routeConfiguration: ProximiioRouteConfiguration) {\n    this.routeStarted = false\n    this.routePreviewed = true\n    ProximiioMapboxNative.routeFindAndPreview(JSON.stringify(routeConfiguration));\n  }\n\n  /**\n   * Find route to navigate on, and immediately start navigation.\n   */\n  public findAndStart(routeConfiguration: ProximiioRouteConfiguration) {\n    this.routeStarted = true\n    this.routePreviewed = true\n    ProximiioMapboxNative.routeFindAndStart(JSON.stringify(routeConfiguration));\n  }\n\n  /**\n   * Preview route on map. Returns true if route preview was enabled.\n   */\n  public preview() {\n    if (this.route != null && this.routePreviewed && !this.routeStarted) {\n      return false;\n    } else {\n      this.routePreviewed = true\n      this.notify(ProximiioRouteEvents.ROUTE_PREVIEWED)\n      return true;\n    }\n  }\n\n  /**\n   * Start prepared route (that is, of the te routeFind* methods was called before and route was successfully found).\n   */\n  public start() {\n    if (this.route != null && !this.routeStarted) {\n      this.routeStarted = true\n      ProximiioMapboxNative.routeStart();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Stops current navigation, or route preview (removes the path from map).\n   */\n  public cancel() {\n    ProximiioMapboxNative.routeCancel();\n    this.routeStarted = false\n  }\n\n  /* ---------------------------------------------------------------------------------------------------------------- */\n  /* Event handling */\n\n  /**\n   *\n   * @param route\n   */\n  public onCalculated(route?: ProximiioMapboxRoute) {\n    this.route = route\n    this.notify(ProximiioRouteEvents.ROUTE_CALCULATED, route)\n  }\n\n  public onUpdate(event: ProximiioRouteEvent) {\n    // Test route end\n    if (\n      event.eventType == 'FINISHED'\n      || event.eventType == 'CANCELED'\n      || event.eventType == 'ROUTE_NOT_FOUND'\n      || event.eventType == 'ROUTE_OSRM_NETWORK_ERROR'\n    ) {\n      this.routeStarted = false;\n      this.routePreviewed = false;\n      this.route = undefined;\n      this.notify(ProximiioRouteEvents.ROUTE_ENDED, event);\n    } else {\n      this.route = event.route;\n      this.notify(ProximiioRouteEvents.ROUTE_UPDATED, event);\n    }\n  }\n}\n"]}