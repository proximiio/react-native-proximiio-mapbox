{"version":3,"sources":["geojson_source.tsx"],"names":["GeoJSONSource","collection","type","features","syncKey","layers","ProximiioMapbox","style","props","level","tryFeatures","subscribe","ProximiioMapboxEvents","FEATURES_CHANGED","onChange","unsubscribe","nextProps","nextState","_","filter","state","s","Date","_features","getFeatures","setState","getTime","evt","onPress","featureIds","map","it","id","pressedFeatures","includes","getLayers","children","React","Component"],"mappings":"y7BAAA,oDACA,0EACA,oEACA,6DACA,kC,qzDAkBaA,CAAAA,a,0bACH,CACNC,UAAU,CAAE,CACVC,IAAI,CAAE,mBADI,CAEVC,QAAQ,CAAE,EAFA,CADN,CAKNC,OAAO,CAAE,CALH,C,sFAsCI,UAAM,CAChB,GAAMC,CAAAA,MAAM,CAAG,0BAAYC,kBAAgBC,KAA5B,CAAmC,MAAnC,CAA2C,MAAKC,KAAL,CAAWC,KAAtD,CAAf,CACA,MAAOJ,CAAAA,MAAP,CACD,C,qFAEU,UAAM,CACf,MAAKK,WAAL,GACD,C,wFArCD,4BAAoB,CAClB,KAAKA,WAAL,GACAJ,kBAAgBK,SAAhB,CAA0BC,gCAAsBC,gBAAhD,CAAkE,KAAKC,QAAvE,EACD,C,oCAED,+BAAuB,CACrBR,kBAAgBS,WAAhB,CAA4BH,gCAAsBC,gBAAlD,CAAoE,KAAKC,QAAzE,EACD,C,qCAED,+BAAsBE,SAAtB,CAAkDC,SAAlD,CAA8EC,CAA9E,CAA+F,CAC7F,MACE,MAAKV,KAAL,CAAWC,KAAX,GAAqBO,SAAS,CAACP,KAA/B,EACG,KAAKD,KAAL,CAAWW,MAAX,GAAsBH,SAAS,CAACG,MADnC,EAEG,KAAKC,KAAL,CAAWhB,OAAX,GAAuBa,SAAS,CAACb,OAHtC,CAKD,C,2BAED,sKACQiB,CADR,CACY,GAAIC,CAAAA,IAAJ,EADZ,CAEQC,SAFR,CAEoBjB,kBAAgBkB,WAAhB,EAFpB,CAGQrB,QAHR,CAGmB,KAAKK,KAAL,CAAWW,MAAX,CAAoBI,SAAS,CAACJ,MAAV,CAAiB,KAAKX,KAAL,CAAWW,MAA5B,CAApB,CAA0DI,SAH7E,CAIE,KAAKE,QAAL,CAAc,CACZxB,UAAU,CAAE,CACVC,IAAI,CAAE,mBADI,CAEVC,QAAQ,CAAEA,QAFA,CADA,CAKZC,OAAO,CAAE,GAAIkB,CAAAA,IAAJ,GAAWI,OAAX,EALG,CAAd,EAJF,qE,sBAsBA,iBAAgB,iBACd,MAAO,2DACL,6BAAC,aAAD,CAAU,WAAV,EACE,EAAE,CAAC,MADL,CAEE,GAAG,iBAFL,CAGE,KAAK,CAAE,KAAKN,KAAL,CAAWnB,UAHpB,CAIE,YAAY,CAAE,EAJhB,CAKE,OAAO,CAAE,iBAAC0B,GAAD,CAAc,CACrB,GAAI,MAAI,CAACnB,KAAL,CAAWoB,OAAf,CAAwB,CAEtB,GAAMC,CAAAA,UAAU,CAAGF,GAAG,CAACxB,QAAJ,CAAa2B,GAAb,CAAiB,SAACC,EAAD,QAAaA,CAAAA,EAAE,CAACC,EAAhB,EAAjB,CAAnB,CACA,GAAMC,CAAAA,eAAe,CAAG,MAAI,CAACb,KAAL,CAAWnB,UAAX,CAAsBE,QAAtB,CAA+BgB,MAA/B,CAAsC,SAACY,EAAD,QAAQF,CAAAA,UAAU,CAACK,QAAX,CAAoBH,EAAE,CAACC,EAAvB,CAAR,EAAtC,CAAxB,CACA,MAAI,CAACxB,KAAL,CAAWoB,OAAX,CAAmBK,eAAnB,EACD,CACF,CAZH,4EAaI,KAAKE,SAAL,EAbJ,CADK,CAgBJ,KAAK3B,KAAL,CAAW4B,QAhBP,CAAP,CAkBD,C,2BAnEgCC,eAAMC,S,mDAsE1BtC,a","sourcesContent":["import React from 'react';\nimport MapboxGL from '@react-native-mapbox-gl/maps';\nimport LayerMapper from './layer_mapper';\nimport ProximiioMapbox, { ProximiioMapboxEvents } from './instance';\nimport { Feature } from './feature';\n\ninterface Props {\n  level: number\n  filter?: (Feature: Feature) => boolean\n  onPress?: (features: Feature[]) => void\n}\n\ntype VariousLayer = MapboxGL.BackgroundLayer | MapboxGL.LineLayer | MapboxGL.FillLayer | MapboxGL.SymbolLayer | MapboxGL.CircleLayer | MapboxGL.HeatmapLayer | MapboxGL.FillExtrusionLayer\n\ninterface State {\n  collection: {\n    type: 'FeatureCollection',\n    features: Feature[]\n  },\n  syncKey: number\n}\n\nexport class GeoJSONSource extends React.Component<Props, State> {\n  state = {\n    collection: {\n      type: 'FeatureCollection',\n      features: []\n    },\n    syncKey: 0\n  } as State\n\n  componentDidMount() {\n    this.tryFeatures()\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  componentWillUnmount() {\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<Props>, nextState: Readonly<State>, _: any): boolean {\n    return (\n      this.props.level !== nextProps.level\n      || this.props.filter !== nextProps.filter\n      || this.state.syncKey !== nextState.syncKey\n    );\n  }\n\n  async tryFeatures() {\n    const s = new Date();\n    const _features = ProximiioMapbox.getFeatures();\n    const features = this.props.filter ? _features.filter(this.props.filter) : _features;\n    this.setState({\n      collection: {\n        type: 'FeatureCollection',\n        features: features,\n      },\n      syncKey: new Date().getTime()\n    })\n  }\n\n  getLayers = () => {\n    const layers = LayerMapper(ProximiioMapbox.style, 'main', this.props.level) as VariousLayer[];\n    return layers;\n  }\n\n  onChange = () => {\n    this.tryFeatures()\n  }\n\n  public render() {\n    return <>\n      <MapboxGL.ShapeSource\n        id=\"main\"\n        key={`geojson-source`}\n        shape={this.state.collection as any}\n        maxZoomLevel={24}\n        onPress={(evt: any) => {\n          if (this.props.onPress) {\n            // Mapbox can modify features internally, ensure user gets Proximi.io features\n            const featureIds = evt.features.map((it: any) => it.id);\n            const pressedFeatures = this.state.collection.features.filter((it) => featureIds.includes(it.id));\n            this.props.onPress(pressedFeatures);\n          }\n        }}>\n        { this.getLayers() }\n      </MapboxGL.ShapeSource>\n      {this.props.children}\n    </>;\n  }\n}\n\nexport default GeoJSONSource\n"]}