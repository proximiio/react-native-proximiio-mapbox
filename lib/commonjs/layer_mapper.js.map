{"version":3,"sources":["layer_mapper.tsx"],"names":["style","source","level","Array","isArray","layers","filter","layer","map","type","entity","BackgroundLayer","setFilterLevel","id","RasterLayer","FillLayer","LineLayer","indexed","undefined","FillExtrusionLayer","SymbolLayer","HeatmapLayer","CircleLayer"],"mappings":"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","sourcesContent":["import React from 'react'\nimport MapboxGL from \"@react-native-mapbox-gl/maps\"\n\nimport BackgroundLayer from './layers/background_layer'\nimport CircleLayer from './layers/circle_layer'\nimport FillLayer from './layers/fill_layer'\nimport FillExtrusionLayer from './layers/fill_extrusion_layer'\nimport HeatmapLayer from './layers/heatmap_layer'\nimport LineLayer from './layers/line_layer'\nimport RasterLayer from './layers/raster_layer'\nimport SymbolLayer from './layers/symbol_layer'\n\nexport default (style: any, source: string, level: number = 0) => {\n  if (!style || !Array.isArray(style.layers)) {\n    return []\n  }\n\n  const layers = style.layers\n    .filter((layer: any) => layer.source === source)\n\n  return layers.map((layer: any) => {\n    if (layer.type === 'background') {\n      const entity = new BackgroundLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.BackgroundLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'raster') {\n      const entity = new RasterLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.RasterLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'fill') {\n      const entity = new FillLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.FillLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'line') {\n      const entity = new LineLayer(layer)\n      entity.setFilterLevel(level)\n      const indexed = source === 'route' ? 800 : undefined\n      return <MapboxGL.LineLayer {...entity} key={`layer-${layer.id}`} layerIndex={indexed} style={entity.style}/>\n    }\n    if (layer.type === 'fill-extrusion') {\n      const entity = new FillExtrusionLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.FillExtrusionLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'symbol') {\n      const entity = new SymbolLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.SymbolLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'heatmap') {\n      const entity = new HeatmapLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.HeatmapLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n    if (layer.type === 'circle') {\n      const entity = new CircleLayer(layer)\n      entity.setFilterLevel(level)\n      return <MapboxGL.CircleLayer {...entity} key={`layer-${layer.id}`} style={entity.style}/>\n    }\n\n    return null\n  }) as any[]\n}\n"]}