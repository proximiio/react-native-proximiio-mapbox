{"version":3,"sources":["base_layer.ts"],"names":["Serializable","BaseLayer","data","id","type","source","sourceLayer","minZoomLevel","minzoom","maxZoomLevel","maxzoom","filter","metadata","level","newFilter","forEach","_filter","filterIndex","changed","lvl","Array","isArray","expression","paint","json","layout","base","style","Object","keys","key"],"mappings":"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","sourcesContent":["// The type of layer is specified  by the \"type\" property, and must be one of background, fill, line, symbol,\n// raster, circle, fill-extrusion, heatmap, hillshade.\n// Except for layers of the background type, each layer needs to refer to a source. Layers take the data that\n// they get from a source, optionally filter features, and then define how those features are styled.\n\nimport { cloneDeep as clone } from 'lodash'\nimport { kebabize } from \"../helpers\"\n\nexport class Serializable {\n  get json() {\n    return kebabize(this)\n  }\n}\n\nexport default class BaseLayer {\n  id: string\n  source?: string // required for all layer types except 'background'\n  sourceLayer?: string\n  type: 'background' | 'fill' | 'line' | 'symbol' | 'raster' | 'circle' | 'fill-extrusion' | 'heatmap' | 'hillshade'\n  minZoomLevel?: number\n  maxZoomLevel?: number\n  filter?: any\n  paint?: Serializable\n  layout?: Serializable\n  metadata?: any\n\n  constructor(data: any) {\n    this.id = data.id\n    this.type = data.type\n    this.source = data.source\n    this.sourceLayer = data['source-layer']\n    this.minZoomLevel = data.minzoom\n    this.maxZoomLevel = data.maxzoom\n    this.filter = data.filter\n    this.metadata = data.metadata\n  }\n\n  get json() {\n    const { id, type, source, sourceLayer, minZoomLevel, maxZoomLevel, filter, metadata } = this\n    const data: any = { id, type }\n    if (source) data.source = source\n    if (sourceLayer) data['source-layer'] = sourceLayer\n    if (minZoomLevel) data.minZoomLevel = minZoomLevel\n    if (maxZoomLevel) data.maxZoomLevel = maxZoomLevel\n    if (filter) data.filter = filter\n\n    if (this.metadata) {\n      data.metadata = metadata\n    }\n\n    if (this.paint) {\n      data.paint = this.paint.json\n    }\n\n    if (this.layout) {\n      data.layout = this.layout.json\n    }\n\n    return data\n  }\n\n  get style() {\n    const base = {...this.paint, ...this.layout} as any\n    // const base = this.layout as any\n    const style = {} as any\n    Object.keys(base).forEach(key => {\n      if (base[key]) {\n        style[key] = base[key]\n      }\n    })\n    return style\n  }\n\n  setFilterLevel(level: number) {\n    const newFilter = clone(this.filter)\n\n    this.filter.forEach((_filter: any, filterIndex: number) => {\n      const filter = clone(_filter)\n      let changed = false;\n\n      if (this.id === 'proximiio-levelchangers') {\n        const lvl = `__level_${level}`\n        if (filterIndex === 3) {\n          filter[1] = lvl;\n          changed = true;\n        }\n        if (filterIndex === 4) {\n          filter[1][1] = lvl;\n          changed = true;\n        }\n      }\n\n      if (Array.isArray(filter)) {\n        if (filter[0] === '==') {\n          const expression = filter[1]\n          if (expression[0] === 'to-number') {\n            if (expression[1][0] === 'get' && expression[1][1] === 'level') {\n              filter[2] = level\n              changed = true\n            }\n          }\n\n          if (expression[0] === 'get' && expression[1] === 'level') {\n            filter[2] = level\n            changed = true\n          }\n        }\n\n        if (filter[0] === '<=') {\n          const expression = filter[1]\n          if (expression[0] === 'to-number') {\n            if (expression[1][0] === 'get' && expression[1][1] === 'level_min') {\n              filter[2] = level\n              changed = true\n            }\n          }\n\n          if (expression[0] === 'get' && expression[1] === 'level_min') {\n            filter[2] = level\n            changed = true\n          }\n        }\n\n        if (filter[0] === '>=') {\n          const expression = filter[1]\n          if (expression[0] === 'to-number') {\n            if (expression[1][0] === 'get' && expression[1][1] === 'level_max') {\n              filter[2] = level\n              changed = true\n            }\n          }\n\n          if (expression[0] === 'get' && expression[1] === 'level_max') {\n            filter[2] = level\n            changed = true\n          }\n        }\n      }\n\n      if (changed) {\n        newFilter[filterIndex] = filter\n      }\n    })\n    this.filter = newFilter\n  }\n}\n"]}