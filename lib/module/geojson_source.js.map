{"version":3,"sources":["geojson_source.tsx"],"names":["GeoJSONSource","collection","type","features","syncKey","layers","ProximiioMapbox","style","props","level","Array","isArray","ignoreLayers","forEach","layer","id","includes","visibility","tryFeatures","evt","onPress","featureIds","map","it","pressedFeatures","state","filter","subscribe","ProximiioMapboxEvents","FEATURES_CHANGED","onChange","unsubscribe","nextProps","nextState","_","_features","getFeatures","setState","Date","getTime","getLayers","children","React","Component"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport MapboxGL, { OnPressEvent } from '@react-native-mapbox-gl/maps';\nimport LayerMapper from './layer_mapper';\nimport ProximiioMapbox, { ProximiioMapboxEvents } from './instance';\nimport { Feature } from './feature';\n\ninterface Props {\n  level: number\n  filter?: (Feature: Feature) => boolean\n  ignoreLayers?: string[] // array of layer ids to set invisible\n  onPress?: (features: Feature[]) => void\n}\n\ntype VariousLayer = MapboxGL.BackgroundLayer | MapboxGL.LineLayer | MapboxGL.FillLayer | MapboxGL.SymbolLayer | MapboxGL.CircleLayer | MapboxGL.HeatmapLayer | MapboxGL.FillExtrusionLayer\n\ninterface State {\n  collection: {\n    type: 'FeatureCollection',\n    features: Feature[]\n  },\n  syncKey: number\n}\n\nexport class GeoJSONSource extends React.Component<PropsWithChildren<Props>, State> {\n  state = {\n    collection: {\n      type: 'FeatureCollection',\n      features: []\n    },\n    syncKey: 0\n  } as State\n\n  componentDidMount() {\n    this.tryFeatures()\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  componentWillUnmount() {\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<Props>, nextState: Readonly<State>, _: any): boolean {\n    return (\n      this.props.level !== nextProps.level\n      || this.props.filter !== nextProps.filter\n      || this.state.syncKey !== nextState.syncKey\n    );\n  }\n\n  async tryFeatures() {\n    const _features = ProximiioMapbox.getFeatures();\n    const features = this.props.filter ? _features.filter(this.props.filter) : _features;\n    this.setState({\n      collection: {\n        type: 'FeatureCollection',\n        features: features,\n      },\n      syncKey: new Date().getTime()\n    })\n  }\n\n  getLayers = () => {\n    const layers = LayerMapper(ProximiioMapbox.style, 'main', this.props.level) as VariousLayer[];\n\n    if (Array.isArray(this.props.ignoreLayers)) {\n      layers.forEach(layer => {\n        if (layer.props.id && this.props.ignoreLayers!.includes(layer.props.id)) {\n          const style = layer.props.style;\n          (style as any).visibility = 'none'\n        }\n      })\n    }\n\n    return layers;\n  }\n\n  onChange = () => this.tryFeatures()\n\n  onPress = (evt: OnPressEvent) => {\n    if (!this.props.onPress) {\n      return\n    }\n\n    // Mapbox can modify features internally, ensure user gets Proximi.io features\n    const featureIds = evt.features.map((it: any) => it.id);\n    const pressedFeatures = this.state.collection.features.filter((it) => featureIds.includes(it.id));\n    this.props.onPress(pressedFeatures);\n  }\n\n  public render() {\n    return <>\n      <MapboxGL.ShapeSource\n        id=\"main\"\n        key=\"geojson-source\"\n        shape={this.state.collection as any}\n        maxZoomLevel={24}\n        onPress={this.onPress}>\n        { this.getLayers() }\n      </MapboxGL.ShapeSource>\n      {this.props.children}\n    </>;\n  }\n}\n\nexport default GeoJSONSource\n"]}