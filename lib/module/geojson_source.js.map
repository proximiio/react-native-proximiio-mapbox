{"version":3,"sources":["geojson_source.tsx"],"names":["GeoJSONSource","collection","type","features","layers","syncKey","ProximiioMapbox","style","props","level","setState","getLayers","tryFeatures","tryLayers","subscribe","ProximiioMapboxEvents","FEATURES_CHANGED","onChange","unsubscribe","nextProps","nextState","_","filter","state","prevProps","updateLevel","s","Date","_features","getFeatures","getTime","evt","onPress","map","f","Feature","React","Component"],"mappings":"igCAAA,oDACA,0EACA,oEACA,6DACA,kCAEA,qE,uzBALoD,C,GAwBvCA,CAAAA,a,0bACH,CACNC,UAAU,CAAE,CACVC,IAAI,CAAE,mBADI,CAEVC,QAAQ,CAAE,EAFA,CADN,CAKNC,MAAM,CAAE,EALF,CAMNC,OAAO,CAAE,CANH,C,sFAkDI,UAAM,CAChB,GAAMD,CAAAA,MAAM,CAAG,0BAAYE,kBAAgBC,KAA5B,CAAmC,MAAnC,CAA2C,MAAKC,KAAL,CAAWC,KAAtD,CAAf,CACA,MAAOL,CAAAA,MAAP,CACD,C,sFAEW,UAAM,CAChB,MAAKM,QAAL,CAAc,CAAEN,MAAM,CAAE,MAAKO,SAAL,EAAV,CAAd,EACD,C,wFAEa,UAAM,CAClB,MAAKD,QAAL,CAAc,CAAEN,MAAM,CAAE,MAAKO,SAAL,EAAV,CAAd,EACD,C,qFAEU,UAAM,CACf,MAAKC,WAAL,GACD,C,oHAxDmB,CAClB,KAAKA,WAAL,GACA,KAAKC,SAAL,GACAP,kBAAgBQ,SAAhB,CAA0BC,gCAAsBC,gBAAhD,CAAkE,KAAKC,QAAvE,EACD,C,mEAEsB,CACrBX,kBAAgBY,WAAhB,CAA4BH,gCAAsBC,gBAAlD,CAAoE,KAAKC,QAAzE,EACD,C,oEAEqBE,S,CAA4BC,S,CAA4BC,C,CAAiB,CAC7F,MACE,MAAKb,KAAL,CAAWC,KAAX,GAAqBU,SAAS,CAACV,KAA/B,EACG,KAAKD,KAAL,CAAWc,MAAX,GAAsBH,SAAS,CAACG,MADnC,EAEG,KAAKC,KAAL,CAAWlB,OAAX,GAAuBe,SAAS,CAACf,OAHtC,CAKD,C,8DAEkBmB,S,CAAkB,CACnC,GAAIA,SAAS,CAACf,KAAV,GAAoB,KAAKD,KAAL,CAAWC,KAAnC,CAA0C,CACxC,KAAKgB,WAAL,GACD,CAFD,IAEO,CACL,GAAI,CAAC,oBAAMD,SAAN,CAAiB,KAAKhB,KAAtB,CAAL,CAAmC,CACjC,KAAKI,WAAL,GACD,CACF,CACF,C,iMAGOc,C,CAAI,GAAIC,CAAAA,IAAJ,E,CACJC,S,CAAYtB,kBAAgBuB,WAAhB,E,CACZ1B,Q,CAAW,KAAKK,KAAL,CAAWc,MAAX,CAAoBM,SAAS,CAACN,MAAV,CAAiB,KAAKd,KAAL,CAAWc,MAA5B,CAApB,CAA0DM,S,CAC3E,KAAKlB,QAAL,CAAc,CACZT,UAAU,CAAE,CACVC,IAAI,CAAE,mBADI,CAEVC,QAAQ,CAARA,QAFU,CADA,CAKZE,OAAO,CAAE,GAAIsB,CAAAA,IAAJ,GAAWG,OAAX,EALG,CAAd,E,4GA0Bc,iBACd,MAAO,8BAAC,aAAD,CAAU,WAAV,EACL,EAAE,CAAC,MADE,CAEL,GAAG,0BAAoB,KAAKP,KAAL,CAAWlB,OAA/B,CAFE,CAGL,KAAK,CAAE,KAAKkB,KAAL,CAAWtB,UAHb,CAIL,YAAY,CAAE,EAJT,CAKL,OAAO,CAAE,iBAAC8B,GAAD,CAAc,CACrB,GAAI,MAAI,CAACvB,KAAL,CAAWwB,OAAf,CAAwB,CACtB,MAAI,CAACxB,KAAL,CAAWwB,OAAX,CAAmBD,GAAG,CAAC5B,QAAJ,CAAa8B,GAAb,CAAiB,SAACC,CAAD,QAA6B,IAAIC,iBAAJ,CAAYD,CAAZ,CAA7B,EAAjB,CAAnB,EACD,CACF,CATI,6EAUH,KAAKX,KAAL,CAAWnB,MAVR,CAAP,CAYD,C,2BAjFgCgC,eAAMC,S,mDAoF1BrC,a","sourcesContent":["import React from 'react';\nimport MapboxGL from '@react-native-mapbox-gl/maps';;\nimport LayerMapper from './layer_mapper';\nimport ProximiioMapbox, { ProximiioMapboxEvents } from './instance';\nimport { Feature } from './feature';\nimport { ProximiioFeatureType } from './types';\nimport equal from 'fast-deep-equal/react';\n\ninterface Props {\n  level: number\n  filter?: (Feature: Feature) => boolean\n  onPress?: (features: Feature[]) => void\n}\n\ntype VariousLayer = MapboxGL.BackgroundLayer | MapboxGL.LineLayer | MapboxGL.FillLayer | MapboxGL.SymbolLayer | MapboxGL.CircleLayer | MapboxGL.HeatmapLayer | MapboxGL.FillExtrusionLayer\n\ninterface State {\n  collection: {\n    type: 'FeatureCollection',\n    features: Feature[]\n  },\n  layers: VariousLayer[],\n  syncKey: number\n}\n\nexport class GeoJSONSource extends React.Component<Props, State> {\n  state = {\n    collection: {\n      type: 'FeatureCollection',\n      features: []\n    },\n    layers: [],\n    syncKey: 0\n  } as State\n\n  componentDidMount() {\n    this.tryFeatures()\n    this.tryLayers()\n    ProximiioMapbox.subscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  componentWillUnmount() {\n    ProximiioMapbox.unsubscribe(ProximiioMapboxEvents.FEATURES_CHANGED, this.onChange)\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<Props>, nextState: Readonly<State>, _: any): boolean {\n    return (\n      this.props.level !== nextProps.level\n      || this.props.filter !== nextProps.filter\n      || this.state.syncKey !== nextState.syncKey\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.level !== this.props.level) {\n      this.updateLevel()\n    } else {\n      if (!equal(prevProps, this.props)) {\n        this.tryFeatures()\n      }\n    }\n  }\n\n  async tryFeatures() {\n    const s = new Date();\n    const _features = ProximiioMapbox.getFeatures();\n    const features = this.props.filter ? _features.filter(this.props.filter) : _features;\n    this.setState({\n      collection: {\n        type: 'FeatureCollection',\n        features,\n      },\n      syncKey: new Date().getTime()\n    })\n  }\n\n  getLayers = () => {\n    const layers = LayerMapper(ProximiioMapbox.style, 'main', this.props.level) as VariousLayer[];\n    return layers;\n  }\n\n  tryLayers = () => {\n    this.setState({ layers: this.getLayers() })\n  }\n\n  updateLevel = () => {\n    this.setState({ layers: this.getLayers() })\n  }\n\n  onChange = () => {\n    this.tryFeatures()\n  }\n\n  public render() {\n    return <MapboxGL.ShapeSource\n      id=\"main\"\n      key={`geojson-source-${this.state.syncKey}`}\n      shape={this.state.collection as any}\n      maxZoomLevel={24}\n      onPress={(evt: any) => {\n        if (this.props.onPress) {\n          this.props.onPress(evt.features.map((f: ProximiioFeatureType) => new Feature(f)))\n        }\n      }}>\n      { this.state.layers }\n    </MapboxGL.ShapeSource>\n  }\n}\n\nexport default GeoJSONSource\n"]}